// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RoomRequirementsFormContainer Component Renders RoomRequirementsFormContainer Element should match snapshot 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialValues": Object {
        "adults": 2,
        "children": 1,
        "cotRequired": false,
        "type": "FAM",
      },
      "isSubmitting": false,
      "isValid": false,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setError": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validate": undefined,
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validationSchema": undefined,
      "values": Object {
        "adults": 2,
        "children": 1,
        "cotRequired": false,
        "type": "FAM",
      },
    }
  }
>
  <RoomRequirementsForm
    dictionary={
      Object {
        "roomrequirements.title.edit": "Edit room requirements",
        "roomrequirements.type.accessible": "Accessible",
        "roomrequirements.type.double": "Double",
        "roomrequirements.type.family": "Family",
        "roomrequirements.type.single": "Single",
      }
    }
    dirty={false}
    errors={Object {}}
    handleBlur={[Function]}
    handleChange={[Function]}
    handleReset={[Function]}
    handleSubmit={[Function]}
    initialValues={
      Object {
        "adults": 2,
        "children": 1,
        "cotRequired": false,
        "type": "FAM",
      }
    }
    isSubmitting={false}
    isValid={false}
    isValidating={false}
    profile={
      Object {
        "additionalGuests": Array [
          Object {
            "carRegistration": "",
            "email": "mac@test.com",
            "firstName": "Mac",
            "lastName": "Donalds",
            "mobile": "+441111111111",
            "nationality": "RP",
            "telephone": "1111111111",
            "title": "Mr",
          },
        ],
        "bookingPreference": Object {
          "foodPreference": 11,
          "roomRequirements": Object {
            "adults": 2,
            "children": 1,
            "cotRequired": false,
            "hotelBrand": "ZIP",
            "type": "FAM",
          },
          "wantSmsConfirmations": false,
        },
        "businessUse": false,
        "companyId": "",
        "companyName": "Pareto Law",
        "contactDetail": Object {
          "address": Object {
            "companyName": "Whitbread",
            "countryCode": "GB",
            "line1": "120 Holborn",
            "line2": "",
            "line3": "",
            "line4": "LONDON",
            "line5": "",
            "postCode": "EC1N 2TD",
            "type": "BUSINESS",
          },
          "carRegistration": "",
          "email": "test@whitbread.com",
          "firstName": "Test",
          "lastName": "Test",
          "mobile": "+351222222222",
          "nationality": "GB",
          "passport": Object {
            "countryOfIssue": "",
            "number": "",
          },
          "telephone": "111111111",
          "title": "Mr",
        },
        "guestHistoryNumber": "G14187551",
        "paymentPreference": Object {
          "electronicInvoiceRequired": true,
          "paymentCard": Object {
            "cardHolderName": "dwa",
            "cardNumber": "************1111",
            "cardType": "VI",
            "expiryDate": "07/23",
          },
        },
        "sessionId": "zdiKE1MflNUmdXAS",
      }
    }
    registerField={[Function]}
    resetForm={[Function]}
    roomRequirements={
      Object {
        "adults": Array [
          1,
          2,
        ],
        "children": Array [
          0,
          1,
          2,
        ],
        "defaults": Object {
          "adults": 1,
          "children": 0,
          "cotRequired": false,
          "hotelBrand": "PI",
          "type": "DB",
        },
        "type": Array [
          Object {
            "code": "DB",
            "dictionaryKey": "roomrequirements.type.double",
          },
          Object {
            "code": "SB",
            "dictionaryKey": "roomrequirements.type.single",
          },
          Object {
            "code": "TWIN",
            "dictionaryKey": "roomrequirements.type.twin",
          },
          Object {
            "code": "DIS",
            "dictionaryKey": "roomrequirements.type.accessible",
          },
          Object {
            "code": "FAM",
            "dictionaryKey": "roomrequirements.type.family",
          },
        ],
      }
    }
    setEditView={[MockFunction]}
    setError={[Function]}
    setErrors={[Function]}
    setFieldError={[Function]}
    setFieldTouched={[Function]}
    setFieldValue={[Function]}
    setFormikState={[Function]}
    setStatus={[Function]}
    setSubmitting={[Function]}
    setTouched={[Function]}
    setValues={[Function]}
    submitCount={0}
    submitForm={[Function]}
    touched={Object {}}
    unregisterField={[Function]}
    validateField={[Function]}
    validateForm={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    values={
      Object {
        "adults": 2,
        "children": 1,
        "cotRequired": false,
        "type": "FAM",
      }
    }
  />
</ContextProvider>
`;
